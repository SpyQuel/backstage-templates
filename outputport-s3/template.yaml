apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: outputport-s3-template
  title: Output Port S3 Template
  description: Create a repository containing the definition of an S3 Output Port
  tags:
    - aws
    - s3
    - output-port
spec:
  owner: agilelab
  type: outputport
  
  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - directory
        - cdp_environment
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the output port
        description:
          title: Description
          type: string
          description: Help others understand what this output port is for.
        directory:
          title: Directory
          type: string
          description: Name of the directory on S3.
        cdp_environment:
          title: CDP Environment
          type: string
          description: CDP Environment that owns the S3 bucket.
        owner:
          title: Owner
          type: string
          description: Owner of the output port
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: 
              - Group
    - title: Data Product details
      required:
        - dataproduct
        - domain
        - version
        - environment
      properties:
        dataproduct:
          title: Data Product
          type: string
          description: the Data Product this output port belongs to
          ui:field: EntityPicker
          ui:options:
            allowedKinds: 
              - System
        domain:
          title: Domain
          type: string
          description: the Domain of the Data Product this output port belongs to
        version:
          title: Version
          type: string
          description: the version of the Data Product this output port belongs to
        environment:
          title: Environment
          type: string
          description: the Environment to which this output port will be deployed
    - title: Choose a location  
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: '{{ parameters.component_id }}'
          description: '{{ parameters.description }}'
          artifact_id: '{{ parameters.component_id }}'
          directory: '{{ parameters.directory }}'
          cdp_environment: '{{ parameters.cdp_environment }}'
          domain: '{{ parameters.domain }}'
          dataproduct: '{{ parameters.dataproduct }}'
          environment: '{{ parameters.environment }}'
          version: '{{ parameters.version }}'
          owner: '{{ parameters.owner }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'This is {{ parameters.component_id }}'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'